#!/usr/bin/env node

import os from 'os';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import minimist from 'minimist';

import * as core from '../lib/core.js';
import config from '../lib/config.js';
import * as util from '../lib/util.js';
import * as model from '../model/index.js';

// -----------------------------------------------------------------------------------------------------------------------

const argv = minimist(process.argv.slice(2), {
    string: ['port', 'user', 'password', 'log-download'],
    boolean: ['basic', 'upload-disable', 'folder-make-disable', 'share-only', 'tls', 'tls-debug', 'extend-mode', 'silence', 'usedb'],
    alias: { h: 'help' },
    default: { port: config.defaultPort },
    '--': true,
    stopEarly: false,
});

if (argv['share-only']) {
    argv['upload-disable'] = true;
    argv['folder-make-disable'] = true;
}

if (argv['tls-debug']) {
    argv.tls = true;
}

// -----------------------------------------------------------------------------------------------------------------------

argv.fold = process.cwd();

if (argv._[0] && argv._[0] == '.') {
    argv.fold = process.cwd();
} else if (argv._[0]) {
    let user_set_full_path_match = argv._[0].match(/^\//);
    if (user_set_full_path_match) {
        argv.fold = argv._[0];
    } else {
        argv.fold = process.cwd() + '/' + argv._[0];
    }

    argv.fold = util.http_path_clear(argv.fold);
    argv.fold = path.normalize(argv.fold);
}

if (!fs.existsSync(argv.fold) || !fs.lstatSync(argv.fold).isDirectory()) {
    console.log('');
    console.log('Folder "' + chalk.yellow(argv.fold) + '" is absent.');
    console.log(
        'You can run http-up with folder as first argument, as ' + chalk.yellow('http-up foldername1') + ' or ' + chalk.yellow('http-up /path/to/foldername1'),
    );
    process.exit();
}

// -----------------------------------------------------------------------------------------------------------------------

if (argv.h || argv.help) {
    console.log(
        [
            ``,
            config.version,
            ``,
            `usage: ${chalk.yellow('http-up')} [options] [path]`,
            ``,
            `options:`,
            ``,
            `     --port [int]              Port to use. [${chalk.yellow(config.defaultPort)}]`,
            ``,
            `                               ${chalk.yellow('--port 3999')}`,
            ``,
            `     --tls                     Enable TLS support`,
            ``,
            `     --login    [str]          User for basic authorization.`,
            `     --password [str]          Password for basic authorization.`,
            ``,
            `                               ${chalk.yellow('--login somelogin --password somepassword')}`,
            ``,
            ``,
            `     --basic                   Set basic auth and generate several accounts every time.`,
            ``,
            ``,
            //`     --upload-disable`,
            //`     --folder-make-disable`,
            ``,
            `     --share-only              Set --upload-disable and --folder-make-disable`,
            ``,
            ``,
            `     --extend-mode             Enable delete mechanics. Be very careful. It disabled by default.`,
            ``,
            //`     --crypt                   Enable file encrypt support.`,
            ``,
            `     --log-export [str]        Export all data log to out json file`,
            ``,
            `                               ${chalk.yellow('--log-export file.json')}`,
            ``,
            ``,
            `     --silence                 Disable all console messages`,
            `     --usedb                   Database use`,
            ``,
            ``,
            `examples:`,
            ``,
            `     The safest run`,
            `                        ` + chalk.yellow(`npx http-up`) + ` --tls --basic ` + chalk.white(`/some/path`),
            ``,
            `     Share only`,
            `                        ` + chalk.yellow(`npx http-up`) + ` --share-only ` + chalk.white(`/tmp/fold`),
            ``,
        ].join('\n'),
    );
    process.exit();
}

// -----------------------------------------------------------------------------------------------------------------------

if (argv['log-export']) {
    console.log('');
    console.log('Save log to "' + chalk.yellow(argv['log-export']) + '" ');

    model.event_log.export_to(argv['log-export']);

    //process.exit();
}

// -----------------------------------------------------------------------------------------------------------------------

process.title = 'http-up';

process.on('SIGINT', function () {
    console.log('http-up stopped.');
    process.exit();
});

process.on('SIGTERM', function () {
    console.log('http-up stopped.');
    process.exit();
});

// -----------------------------------------------------------------------------------------------------------------------

core.makeServer(argv);
