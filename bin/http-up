#!/usr/bin/env node

'use strict';

const os = require('os');
const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

let HTTPUP = require('../lib/http-up');

let argv = require('minimist')(process.argv.slice(2), {
    string: ['port', 'user', 'password'],
    boolean: ['basic', 'upload-disable', 'folder-make-disable', 'tls', 'extend-mode', 'crypt'],
    alias: { h: 'help' },
    default: { port: '4000' },
    '--': true,
    stopEarly: false /* populate _ with first non-option */,
    //unknown: function () { ... } /* invoked on unknown param */
});

const config = require('../lib/config');
const util = require('../lib/util');

argv.port = argv.port || argv.p || config.defaultPort;

argv.fold = process.cwd();

if (argv._[0] && argv._[0] == '.') {
    argv.fold = process.cwd();
} else if (argv._[0]) {
    let user_set_full_path_match = argv._[0].match(/^\//);
    if (user_set_full_path_match) {
        argv.fold = argv._[0];
    } else {
        argv.fold = process.cwd() + '/' + argv._[0];
    }

    argv.fold = util.http_path_clear(argv.fold);
    argv.fold = path.normalize(argv.fold);
}

if (argv.h || argv.help) {
    console.log(
        [
            ``,
            `v1.6.8`,
            ``,
            `usage: http-up [path] [options]`,
            ``,
            `options:`,
            `     --port                    Port to use. [${config.defaultPort}]`,
            ``,
            `     --user                    User for basic authorization.`,
            `     --password                Password for basic authorization.`,
            ``,
            `     --basic                   Set basic auth and generate several accounts every time.`,
            ``,
            `     --upload-disable`,
            `     --folder-make-disable`,
            ``,
            `     --tls`,
            ``,
            `     --extend-mode             Enable delete mechanics. Be very careful. It disabled by default.`,
            ``,
            `     --crypt                   Enable file encrypt support.`,
        ].join('\n'),
    );
    process.exit();
}

if (!fs.existsSync(argv.fold) || !fs.lstatSync(argv.fold).isDirectory()) {
    console.log('');
    console.log('Folder "' + chalk.yellow(argv.fold) + '" is absent.');
    console.log(
        'You can run http-up with folder as first argument, as ' + chalk.yellow('http-up foldername1') + ' or ' + chalk.yellow('http-up /path/to/foldername1'),
    );
    process.exit();
}

const homedir = os.homedir();
const httpup_home = path.join(homedir, '.httpup');
const httpup_thumb = path.join(homedir, '.httpup', 'thumb');
const httpup_temp = path.join(homedir, '.httpup', 'temp');

if (!fs.existsSync(httpup_home)) {
    fs.mkdirSync(httpup_home);
}

if (!fs.existsSync(httpup_thumb)) {
    fs.mkdirSync(httpup_thumb);
}

if (!fs.existsSync(httpup_temp)) {
    fs.mkdirSync(httpup_temp);
} else {
    console.log('');
    console.log('Temporary folder "' + chalk.yellow(httpup_temp) + '" is exist.');
    console.log('Run clearing...');

    fs.rmSync(httpup_temp, { recursive: true, force: true });
    fs.mkdirSync(httpup_temp);

    console.log('Done');
    console.log('');
}

/*
if (!fs.existsSync(config.destination)) {
    console.log('');
    console.log('Temporary folder "' + chalk.yellow(config.destination) + '" is absent.');
    console.log('Make new');

    fs.mkdirSync(config.destination);

    console.log('Done');
    console.log('');
} else {
    console.log('');
    console.log('Temporary folder "' + chalk.yellow(config.destination) + '" is exist.');
    console.log('Run clearing...');

    fs.rmSync(config.destination, { recursive: true, force: true });
    fs.mkdirSync(config.destination);

    console.log('Done');
    console.log('');
}
*/

process.title = 'http-up';

HTTPUP.makeServer(argv);

process.on('SIGINT', function () {
    console.log('http-up stopped.');
    process.exit();
});

process.on('SIGTERM', function () {
    console.log('http-up stopped.');
    process.exit();
});
